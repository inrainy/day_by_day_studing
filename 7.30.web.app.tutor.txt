7.30 web.app.tutor


profileapp/views.py  폴더로 가서

내부 매소드 하나를 오버라이딩 할 거임.

-
class ProfileUpdateView(UpdateView):
    model = Profile
    context_object_name = 'target_profile'
    form_class = ProfileCreationForm
    success_url = reverse_lazy('target_profile')
    template_name = 'profileapp/update.html'

    def get_success_url(self):
        return reverse('accountapp:detail', kwargs={'pk': self.object.user.pk})
-
이부분을 바꿔줄 거임.

('target_profile')로 바꾸는 이유는 페이지로 바꾸고 싶으나 detail페이지가 pk를 받고 있음. 고로 pk가 몇번인지 본인인지 로그인이 되어있는지 제대로 식별이 불가능함. 고로 이러한 매소드를 써줌,


reverse 이부분 import

업데이트를 하거나 에디트를 하면 홈페이지로 돌아감 그것을 프로필 페이지(디테일페이지)로 바꾸고 싶음.

-
class ProfileCreateView(CreateView):
    model = Profile
    form_class = ProfileCreationForm
    template_name = 'profileapp/create.html'

    def form_valid(self, form):
        form.instance.user = self.request.user
        return super().form_valid(form)
이부분에도 아래 거 한 줄 추가해주고 변경된 거 바꾸기
    def get_success_url(self):
        return reverse('accountapp:detail', kwargs={'pk': self.object.user.pk})
-


accountapp/views.py 파일로 가서

class AccountUpdateView(UpdateView):
    model = User
    form_class = AccountCreationForm
    context_object_name = 'target_user'
    template_name = 'accountapp/update.html'
이렇게 변경해주고
ㅡ
    def get_success_url(self):
        return reverse('accountapp:detail', kwargs={'pk': self.object.pk})
ㅡ
이거 작성해주기

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

에디트 부분이 덜 완성된 느낌, 이걸 아이콘으로 바꿔줄 것임.

구글에 material icons

https://fonts.google.com/icons

이페이지

깃허브 레퍼지토리 누르면 깃 허브로 가짐.

Using a font여기에서
-
<link href="https://fonts.googleapis.com/css2?family=Material+Icons"
      rel="stylesheet">
-
이거 복사 해주자!





templates/head.html 파일로 들어가서
-
{#  MATERIAL ICONS LINK  #}
    <link href="https://fonts.googleapis.com/css2?family=Material+Icons"
      rel="stylesheet">
- 이거 적어 줄 것임.





accountapp/templates/accountapp/detail.html 
파일로 들어가서
ㅡ
<a href="{% url 'profileapp:update' pk=target_user.profile.pk %}"
                           class="material-icons round_button">
                                edit
                            </a>

ㅡ

이렇게 바꿔줄 것임,
버튼을 먹여줄거임





static/base.css파일에서

1.아이콘 수정을 해줄 것임,
ㅡ
.round_button {
    color: black;
    text-decoration: none;
    box-shadow: 0 0 3px black;
    border-radius: 20rem;
    padding: 0.3rem;
}
ㅡ
text-decoration: none;
텍스트 꾸며주는 언더라인을 없는 것으로 지정.
box-shadow그림자를 넣어 줄 건데,
앞의 두개는 위치값, 3은 그림자 크기값 4는 색값
border-radius 둥글게하기
padding: 내부 여백 넣어준다.

ㅡ
.round_button:hover {
    color: dimgrey;
}
ㅡ

마우스가 올라가 있을 때 어떻게 동작할 것인지 알려주는 것


commit-push

! 시현이 안될 땐 F 12 + 새로고침!


==================================

accountapp/templates/accountapp/detail.html 
여기에서
update info 부분이랑 quit도 버튼 만들어 주겠음


<div>
            {{ target_user.date_joined }}
        </div>

이부분 지워주기

<div>
            <a href="{% url 'accountapp:update' pk=target_user.pk %}"
               class="material-icons round_button mx-1">
                settings
            </a>
            <a href="{% url 'accountapp:delete' pk=target_user.pk %}"
               class="material-icons round_button mx-1">
                close
            </a>

이렇게 변경해주기


commit-push

-----------------------------------------

magicgrid 라는 라이브러리를 기반으로 사진들을 넣어볼거야!


terminal에서 명령어를 적용해줄것임.

python manage.py startapp articleapp

articleapp 이라는 새폴더가 생김




web_app_study/settings.py파일로 들어가서
ㅡ
'profileapp',
    'articleapp',
ㅡ
articleapp추가해주기.




web_app_study/urls.py파일로 들어가서
ㅡ

path('articles/', include('articleapp.urls')),
ㅡ
이거 추가해주기.



articleapp에 urls.py파일 만들기

ㅡ
urlpatterns = [

]
ㅡ

이거 적어놓고 가지고 있기


commit-push

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


articleapp/urls.py파일에서
ㅡ
app_name = 'articleapp'

urlpatterns = [
    path('list/', TemplateView.as_view(template_name='articleapp/list.html'), name='list')

]
ㅡ
적어주고
path는 from django.urls import path
TemplateView은 from django.views.generic import TemplateView
로 import 해주기




aricleapp에 templates 라는 폴더 생성 후 그 안에 articleapp 폴더를 하나 더 생 성 후 list.html만들기!


magicgrid 구글링해서.
https://github.com/e-oj/Magic-Grid
https://jsfiddle.net/eolaojo/4pov0rdf/
이페이지 들어가서 html파트 싹다 복사 붙여넣기 하기.
메인소스코드까지 걍 다 복 붙 해야함.


static 폴더에 js라는 폴더를 만들어주고 여기 안에 새로운 ![자바스크립트 파일]!을 만들어 줄 것임!

git허브 구글링한 것에 dist파일을 들어가서 cjs에 있는 내용 싹다 복사 붙여넣기 해줌
내용은 오늘 마지막 쯔음에 첨부하겠음.

list에 들어갈 내용
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
{% extends 'base.html' %}
{% load static %}

{% block content %}

    <style>
        .container div {
          width: 280px;
          height: 500px;
          background-color: antiquewhite;
          display: flex;
          justify-content: center;
          align-items: center;
          border-radius: 8px;
        }

        .container .item1 { height: 200px; }
        .container .item4 { height: 800px; }
        .container .item6 { height: 600px; }
        .container .item11 { height: 400px; }
    </style>


    <div class="container">
      <div class="item1">1</div>
      <div class="item2">2</div>
      <div class="item3">3</div>
      <div class="item4">4</div>
      <div class="item5">5</div>
      <div class="item6">6</div>
      <div class="item7">7</div>
      <div class="item8">8</div>
      <div class="item9">9</div>
      <div class="item10">10</div>
      <div class="item11">11</div>
      <div class="item12">12</div>
      <div class="item13">13</div>
    </div>

    <script src="{% static 'js/magicgrid.js' %}"></script>


{% endblock %}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ





commit-push











-------------------------------

'use strict';

/**
 * @author emmanuelolaojo
 * @since 11/11/18
 */

/**
 * Validates the configuration object.
 *
 * @param config - configuration object
 */
var checkParams = function (config) {
  var DEFAULT_GUTTER = 25;
  var booleanProps = ["useTransform", "center"];


  if (!config) {
    throw new Error("No config object has been provided.");
  }

  for(var prop of booleanProps){
    if(typeof config[prop] !== "boolean"){
      config[prop] = true;
    }
  }


  if(typeof config.gutter !== "number"){
    config.gutter = DEFAULT_GUTTER;
  }

  if (!config.container) { error("container"); }
  if (!config.items && !config.static) { error("items or static"); }
};


/**
 * Handles invalid configuration object
 * errors.
 *
 * @param prop - a property with a missing value
 */
var error = function (prop) {
  throw new Error(("Missing property '" + prop + "' in MagicGrid config"));
};

/**
 * Finds the shortest column in
 * a column list.
 *
 * @param cols - list of columns
 *
 * @return shortest column
 */
var getMin = function (cols) {
  var min = cols[0];

  for (var col of cols) {
    if (col.height < min.height) { min = col; }
  }

  return min;
};

/**
 * @author emmanuelolaojo
 * @since 11/10/18
 *
 * The MagicGrid class is an
 * implementation of a flexible
 * grid layout.
 */

var MagicGrid = function MagicGrid (config) {
  checkParams(config);

  if (config.container instanceof HTMLElement) {
    this.container = config.container;
    this.containerClass = config.container.className;
  }
  else {
    this.containerClass = config.container;
    this.container = document.querySelector(config.container);
  }

  this.items = this.container.children;
  this.static = config.static || false;
  this.size = config.items;
  this.gutter = config.gutter;
  this.maxColumns = config.maxColumns || false;
  this.useMin = config.useMin || false;
  this.useTransform = config.useTransform;
  this.animate = config.animate || false;
  this.started = false;
  this.center = config.center;

  this.init();
};

/**
 * Initializes styles
 *
 * @private
 */
MagicGrid.prototype.init = function init () {
  if (!this.ready() || this.started) { return; }

  this.container.style.position = "relative";

  for (var i = 0; i < this.items.length; i++) {
    var style = this.items[i].style;

    style.position = "absolute";

    if (this.animate) {
      style.transition = (this.useTransform ? "transform" : "top, left") + " 0.2s ease";
    }
  }

  this.started = true;
};

/**
 * Calculates the width of a column.
 *
 * @return width of a column in the grid
 * @private
 */
MagicGrid.prototype.colWidth = function colWidth () {
  return this.items[0].getBoundingClientRect().width + this.gutter;
};

/**
 * Initializes an array of empty columns
 * and calculates the leftover whitespace.
 *
 * @return {{cols: Array, wSpace: number}}
 * @private
 */
MagicGrid.prototype.setup = function setup () {
  var width = this.container.getBoundingClientRect().width;
  var colWidth = this.colWidth();
  var numCols = Math.floor(width/colWidth) || 1;
  var cols = [];

  if (this.maxColumns && numCols > this.maxColumns) {
    numCols = this.maxColumns;
  }

  for (var i = 0; i < numCols; i++) {
    cols[i] = {height: 0, index: i};
  }

  var wSpace = width - numCols * colWidth + this.gutter;

  return {cols: cols, wSpace: wSpace};
};

/**
 * Gets the next available column.
 *
 * @param cols list of columns
 * @param i index of dom element
 *
 * @return {*} next available column
 * @private
 */
MagicGrid.prototype.nextCol = function nextCol (cols, i) {
  if (this.useMin) {
    return getMin(cols);
  }

  return cols[i % cols.length];
};

/**
 * Positions each item in the grid, based
 * on their corresponding column's height
 * and index then stretches the container to
 * the height of the grid.
 */
MagicGrid.prototype.positionItems = function positionItems () {
  var ref = this.setup();
    var cols = ref.cols;
    var wSpace = ref.wSpace;
  var maxHeight = 0;
  var colWidth = this.colWidth();

  wSpace = this.center ? Math.floor(wSpace / 2) : 0;

  for (var i = 0; i < this.items.length; i++) {
    var col = this.nextCol(cols, i);
    var item = this.items[i];
    var topGutter = col.height ? this.gutter : 0;
    var left = col.index * colWidth + wSpace + "px";
    var top = col.height + topGutter + "px";

    if(this.useTransform){
      item.style.transform = "translate(" + left + ", " + top + ")";
    }
    else{
      item.style.top = top;
      item.style.left = left;
    }

    col.height += item.getBoundingClientRect().height + topGutter;

    if(col.height > maxHeight){
      maxHeight = col.height;
    }
  }

  this.container.style.height = maxHeight + this.gutter + "px";
};

/**
 * Checks if every item has been loaded
 * in the dom.
 *
 * @return {Boolean} true if every item is present
 */
MagicGrid.prototype.ready = function ready () {
  if (this.static) { return true; }
  return this.items.length >= this.size;
};

/**
 * Periodically checks that all items
 * have been loaded in the dom. Calls
 * this.listen() once all the items are
 * present.
 *
 * @private
 */
MagicGrid.prototype.getReady = function getReady () {
    var this$1 = this;

  var interval = setInterval(function () {
    this$1.container = document.querySelector(this$1.containerClass);
    this$1.items = this$1.container.children;

    if (this$1.ready()) {
      clearInterval(interval);

      this$1.init();
      this$1.listen();
    }
  }, 100);
};

/**
 * Positions all the items and
 * repositions them whenever the
 * window size changes.
 */
MagicGrid.prototype.listen = function listen () {
    var this$1 = this;

  if (this.ready()) {
    var timeout;

    window.addEventListener("resize", function () {
      if (!timeout){
        timeout = setTimeout(function () {
          this$1.positionItems();
          timeout = null;
        }, 200);
      }
    });

    this.positionItems();
  }
  else { this.getReady(); }
};

let magicGrid = new MagicGrid({
  container: '.container',
  animate: true,
  gutter: 30,
  static: true,
  useMin: true
});

magicGrid.listen();


맨 뒤에 구문 js구글링 부분에서 가져온 내용임.
그리고 dist-cjs에 필요없는 마지막 구문을 삭제했음. 나중에 비교해보셈.
(module.exports = MagicGrid;)이부분