mnist - mnist 데이터베이스 (Modified National Institute of Standards and Technology database)는 손으로 쓴 숫자들로 이루어진 대형 데이터베이스

class pass는 뭐때문에 쓴다고 했지? 주석처리 하는 이유랑

클래스를 많이 읽어보는 것만이 답

class를 상속하는 방법은 2가지가 있음
- 클래스 와 클래스 이름 다음 ()괄호 안에 상속받을 것을 넣어주는 것

3..1.5 클레스 attack부분 다시 풀어보기

과제3중에 골드메달 한 번 풀어볼ㄲㅏ...

game_2 = {"pc":["good","bad"],}
print(game_2["pc"][0])
-딕셔너리 벨류 값 찾는것 잊어먹지말자

game_2 = {"pc":["good","bad"],'home' :['loss', 'win']}
row = list(game_2.keys())
print(game_2["pc"][0:])
print(row[1])
키캆!!!!!!!!!!!!!!!!!!

value_count(인덱스넘버) 하면 키값 몇개있는지 찾을 수 있음 예를들어 (일단 판다스 과정에서 배운거라 다를 수 있음)
game_2.value_count(0)



---판다스 나간다! 화이팅!!!

#tsv는 \t로 구분이 되기 때문에
#df = pd.read_csv('~~~.tsv', sep = '\t')

#엑셀의 한 페이지 ,행과 열이 다수 인것을 Dataframe이라고 부르고
#하나의 열? 여튼 가로로 있는 거 이걸 시리즈라고 부름

#df.head(5) ->머리쪽에 쓰는거 5개!

#df.tail(3) ->꼬리쪽에 쓰는게 몇개인지

#그치만 df만 쓰면 앞 뒤로 5개씩 뜬다

#type(df)치면 데이터 타입나오고

#shape 은 행과 열 총 몇개의 모양의로 되어있는지

#object는 문자열 str과 같은 거라고 생각하면 되는데
#df.dtypes 를 치면 데이터 타입이 신기하게 나올것임!

#df.info
#심지어 변수는 어떠한 타입이고 데이터 갯수는 몇개가 들어가있고
#데이터의 크기는 또 얼마나 있는지 모든 정보를 알려줌
#자주 씀

#df['변수를 뽑아내고 싶니? 탭을 눌러보렴!(자료 있을 때 한정)']
#df_country = df['country']
#df_country 라는 시리즈가 나올거임 type해보면 됨

#df_country = df['country', 'pop', 'year']
#df_country 시리즈 여러개 뽑아 올 수 있음

#편향된 데이터를 가지면 편향된 데이터가 나온다.
#6:4에서 거의 5:5는 되어야 데이터가,,
#9:1의 데이터를 비슷한 차이로 바꿔줄때 카피엔 페이스트 를 사용하는 편
#중간중간에 가짜 큰 데이터를 넣어서 하는 방법 밖에 없음

#결측값이(행열다 있는 상태에서 딱 하나 비어있는것) 있을 때에는
#위에 있는 값이나 아래 있는 값으로 바꾸기도 하고, 0으로도 하기도하는데
#회기로써 예측을 하는 방법도 있다.(책엔 안나옴 페이퍼 같은데 나옴)

#loc는 내가 보고 싶은 행을 보여주고
#원하는 데이터를 뽑아줌


#df.loc[:,['year','pop']]
#모든 데이터 중에서 year과 pop을 뽑아 올 수도 있음


#df.iloc[:,[2,4,-1]]
#i와 숫자값을 통해서 찾아 올 수 있음
#하지만 변수가 너무 많을 때 인덱스를 정확하게 파악하지 못할때에는 loc
#여튼 stars_target데이터는 문제가 잇음 <-수업에서 만듬 대충 판다스1내용

class pass는 뭐때문에 쓴다고 했지? 주석처리 하는 이유랑

클래스를 많이 읽어보는 것만이 답

class를 상속하는 방법은 2가지가 있음
- 
  
  클래스 와 클래스 이름 다음 ()괄호 안에 상속받을 것을 넣어주는 것

3..1.5 클레스 attack부분 다시 풀어보기

과제3중에 골드메달 한 번 풀어볼ㄲㅏ...

game_2 = {"pc":["good","bad"],}
print(game_2["pc"][0])
-딕셔너리 벨류 값 찾는것 잊어먹지말자

game_2 = {"pc":["good","bad"],'home' :['loss', 'win']}
row = list(game_2.keys())
print(game_2["pc"][0:])
print(row[1])
키캆!!!!!!!!!!!!!!!!!!

value_count(인덱스넘버) 하면 키값 몇개있는지 찾을 수 있음 예를들어 (일단 판다스 과정에서 배운거라 다를 수 있음)
game_2.value_count(0)



---판다스 나간다! 화이팅!!!

#tsv는 \t로 구분이 되기 때문에
#df = pd.read_csv('~~~.tsv', sep = '\t')

#엑셀의 한 페이지 ,행과 열이 다수 인것을 Dataframe이라고 부르고
#하나의 열? 여튼 가로로 있는 거 이걸 시리즈라고 부름

#df.head(5) ->머리쪽에 쓰는거 5개!

#df.tail(3) ->꼬리쪽에 쓰는게 몇개인지

#그치만 df만 쓰면 앞 뒤로 5개씩 뜬다

#type(df)치면 데이터 타입나오고

#shape 은 행과 열 총 몇개의 모양의로 되어있는지

#object는 문자열 str과 같은 거라고 생각하면 되는데
#df.dtypes 를 치면 데이터 타입이 신기하게 나올것임!

#df.info
#심지어 변수는 어떠한 타입이고 데이터 갯수는 몇개가 들어가있고
#데이터의 크기는 또 얼마나 있는지 모든 정보를 알려줌
#자주 씀

#df['변수를 뽑아내고 싶니? 탭을 눌러보렴!(자료 있을 때 한정)']
#df_country = df['country']
#df_country 라는 시리즈가 나올거임 type해보면 됨

#df_country = df['country', 'pop', 'year']
#df_country 시리즈 여러개 뽑아 올 수 있음

#편향된 데이터를 가지면 편향된 데이터가 나온다.
#6:4에서 거의 5:5는 되어야 데이터가,,
#9:1의 데이터를 비슷한 차이로 바꿔줄때 카피엔 페이스트 를 사용하는 편
#중간중간에 가짜 큰 데이터를 넣어서 하는 방법 밖에 없음

#결측값이(행열다 있는 상태에서 딱 하나 비어있는것) 있을 때에는
#위에 있는 값이나 아래 있는 값으로 바꾸기도 하고, 0으로도 하기도하는데
#회기로써 예측을 하는 방법도 있다.(책엔 안나옴 페이퍼 같은데 나옴)

#loc는 내가 보고 싶은 행을 보여주고
#원하는 데이터를 뽑아줌


#df.loc[:,['year','pop']]
#모든 데이터 중에서 year과 pop을 뽑아 올 수도 있음


#df.iloc[:,[2,4,-1]]
#i와 숫자값을 통해서 찾아 올 수 있음
#하지만 변수가 너무 많을 때 인덱스를 정확하게 파악하지 못할때에는 loc
#여튼 stars_target데이터는 문제가 잇음 <-수업에서 만듬 대충 판다스1내용